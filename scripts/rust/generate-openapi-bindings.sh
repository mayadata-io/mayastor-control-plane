#!/usr/bin/env bash

die()
{
  local _return="${2:-1}"
  echo "$1" >&2
  exit "${_return}"
}

write_version()
{
  write_version="yes"
  if [ -f "$VERSION_FILE" ] && [ "$(which openapi-generator-cli)" = "$(cat "$VERSION_FILE")" ]; then
    write_version=
  fi

  if [ -n "$write_version" ]; then
    which openapi-generator-cli > "$VERSION_FILE"
  fi
}

set -e

SCRIPTDIR=$(dirname "$0")
ROOTDIR="$SCRIPTDIR/../.."
TARGET="$ROOTDIR/openapi"
REAL_TARGET="$(realpath "$TARGET")"
VERSION_FILE="$TARGET/version.txt"
RUST_FMT="$ROOTDIR/.rustfmt.toml"
CARGO_TOML="$TARGET/Cargo.toml"
CARGO_LOCK="$TARGET/../Cargo.lock"
SPEC="$ROOTDIR/control-plane/rest/openapi-specs/v0_api_spec.yaml"
REAL_SPEC="$(realpath "$SPEC")"

# Regenerate the bindings only if the rest src changed
check_spec="no"
# Use the Cargo.toml from the openapi-generator
default_toml="no"
# skip git diff at the end
skip_git_diff="no"
# overwrite files only if the md5 changes
skip_if_md5_same="no"

while [ "$#" -gt 0 ]; do
  _arg="$1"
  case "$_arg" in
      --spec-changes)
          check_spec="yes"
          shift
          ;;
      --skip-git-diff)
          skip_git_diff="yes"
          shift
          ;;
      --default-toml)
          default_toml="yes"
          shift
          ;;
      --skip-md5-same)
          skip_if_md5_same="yes"
          shift
          ;;
      --if-rev-changed)
          if [[ -f "$VERSION_FILE" ]]; then
            version=$(cat "$VERSION_FILE")
            bin_version=$(which openapi-generator-cli)
            [[ "$version" = "$bin_version" ]] && exit 0
          fi
          skip_git_diff="yes"
          shift
          ;;
      --root-dir)
          test $# -lt 2 && die "Missing value for the optional argument '$_arg'."
          ROOTDIR="$2"
          shift
          ;;
      --root-dir=*)
          ROOTDIR="${_arg#*=}"
          shift
          ;;
      --target-dir)
          test $# -lt 2 && die "Missing value for the optional argument '$_arg'."
          TARGET="$2"
          shift
          ;;
      --target-dir=*)
          TARGET="${_arg#*=}"
          shift
          ;;
      --spec-file)
          test $# -lt 2 && die "Missing value for the optional argument '$_arg'."
          SPEC="$2"
          shift
          ;;
      --spec-file=*)
          SPEC="${_arg#*=}"
          shift
          ;;
  esac
done

if [[ $check_spec = "yes" ]]; then
  set +e;
  ( cd "$ROOTDIR"; git diff --exit-code "$REAL_SPEC" 1>/dev/null )
  if [ ${PIPESTATUS} == "0" ]; then
    exit 0
  fi
  set -e;
fi

tmpd=$(mktemp -d /tmp/openapi-gen-XXXXXXX)

# Generate a new openapi crate
openapi-generator-cli generate -i "$SPEC" -g rust-mayastor -o "$tmpd"
( cd "$tmpd"; rm -rf api; rm -rf .* 2>/dev/null || true )

if [[ $default_toml = "no" ]]; then
  cp "$CARGO_TOML" "$tmpd"
fi

# Format the files
# Note, must be formatted on the tmp directory as we've ignored the autogenerated code within the workspace
if [ -f "$RUST_FMT" ]; then
  cp "$RUST_FMT" "$tmpd"
  cp "$CARGO_LOCK" "$tmpd"
  ( cd "$tmpd" && cargo fmt --all || true )
  # Cargo.lock is no longer generated when running cargo fmt
  ( cd "$tmpd"; rm Cargo.lock || true; rm "$(basename "$RUST_FMT")" )
fi

write_version

if [[ "$skip_if_md5_same" = "yes" ]]; then
  source_md5sum=$(cd "$tmpd"; find . -type f -exec md5sum {} \; | md5sum)
  target_md5sum=$(cd "$TARGET"; find . -type f \( ! -name "version.txt" ! -name "build.rs" \) -exec md5sum {} \; | md5sum)

  [[ "$target_md5sum" = "$source_md5sum" ]] && exit 0
fi

# Cleanup the existing autogenerated code
( cd "$ROOTDIR"; git clean -f -e "!version.txt" -X "$REAL_TARGET" || true )

mv "$tmpd"/* "$TARGET"/
rm -rf "$tmpd"

# If the openapi bindings were modified then fail the check
if [[ "$skip_git_diff" = "no" ]]; then
  ( cd "$ROOTDIR"; git diff --exit-code "$REAL_TARGET" )
fi
